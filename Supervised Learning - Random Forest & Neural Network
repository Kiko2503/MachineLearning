{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Central Question - Supervised Learning: How can a housing company best set up the prices of new properties based on a range of different attributes like Construction Year, Object Category, Type of House, Energy Label, Number of rooms, inside surface size, and containing a garden ?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Sub-Questions: \n",
    "- Which model works best when trying to predict the selling price of housing properties ? \n",
    "- What are the most important features when trying to set up prices of new properties ? \n",
    "- How does the object category type predict the price of properties ? "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import numpy as np\n",
    "from scipy import stats\n",
    "import matplotlib.gridspec as gridspec\n",
    "import statsmodels.api as sm\n",
    "import seaborn as sns\n",
    "from scipy.stats import pearsonr\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import mean_squared_error, r2_score\n",
    "from sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV\n",
    "from sklearn.metrics import mean_squared_error\n",
    "from sklearn.svm import SVR\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.tree import DecisionTreeRegressor\n",
    "from sklearn.metrics import mean_absolute_error\n",
    "from scipy.stats import randint as sp_randint"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "from keras import Sequential"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "from keras.layers import Dense"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import GridSearchCV"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "housing_data_clean = pd.read_csv(r'C:\\Users\\buoci\\OneDrive\\Desktop\\Housing_data_Clean_for_testing.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Publication_Date</th>\n",
       "      <th>Purchase_Price</th>\n",
       "      <th>soortWoning</th>\n",
       "      <th>categorieObject</th>\n",
       "      <th>Construction_Year</th>\n",
       "      <th>Garden</th>\n",
       "      <th>Number_of_rooms</th>\n",
       "      <th>Energy_label</th>\n",
       "      <th>globalId.1</th>\n",
       "      <th>inside_surface_size</th>\n",
       "      <th>date_of_signage</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2018-07-31</td>\n",
       "      <td>139000.0</td>\n",
       "      <td>&lt;{woonboot}&gt; &lt;{vrijstaande woning}&gt;</td>\n",
       "      <td>House</td>\n",
       "      <td>1975.0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>C</td>\n",
       "      <td>4388064</td>\n",
       "      <td>62</td>\n",
       "      <td>12/11/2018</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2018-09-24</td>\n",
       "      <td>209000.0</td>\n",
       "      <td>&lt;{eengezinswoning}&gt; &lt;{tussenwoning}&gt;</td>\n",
       "      <td>House</td>\n",
       "      <td>1980.0</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>B</td>\n",
       "      <td>4388200</td>\n",
       "      <td>136</td>\n",
       "      <td>30/08/2018</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2018-08-02</td>\n",
       "      <td>267500.0</td>\n",
       "      <td>&lt;{tussenverdieping}&gt; (&lt;{appartement}&gt;)</td>\n",
       "      <td>Apartment</td>\n",
       "      <td>2005.0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>C</td>\n",
       "      <td>4399344</td>\n",
       "      <td>70</td>\n",
       "      <td>23/11/2018</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2018-08-04</td>\n",
       "      <td>349000.0</td>\n",
       "      <td>&lt;{eengezinswoning}&gt; &lt;{geschakelde 2-onder-1-ka...</td>\n",
       "      <td>House</td>\n",
       "      <td>1973.0</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>C</td>\n",
       "      <td>4400638</td>\n",
       "      <td>144</td>\n",
       "      <td>14/12/2018</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2018-08-06</td>\n",
       "      <td>162500.0</td>\n",
       "      <td>&lt;{eengezinswoning}&gt; &lt;{hoekwoning}&gt;</td>\n",
       "      <td>House</td>\n",
       "      <td>1970.0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>C</td>\n",
       "      <td>4401831</td>\n",
       "      <td>68</td>\n",
       "      <td>06/04/2019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>158637</th>\n",
       "      <td>2018-12-31</td>\n",
       "      <td>227500.0</td>\n",
       "      <td>&lt;{eengezinswoning}&gt; &lt;{tussenwoning}&gt;</td>\n",
       "      <td>House</td>\n",
       "      <td>2012.0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>A</td>\n",
       "      <td>4613491</td>\n",
       "      <td>131</td>\n",
       "      <td>01/02/2019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>158638</th>\n",
       "      <td>2018-12-31</td>\n",
       "      <td>159000.0</td>\n",
       "      <td>&lt;{eengezinswoning}&gt; &lt;{tussenwoning}&gt;</td>\n",
       "      <td>House</td>\n",
       "      <td>1974.0</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>C</td>\n",
       "      <td>4613507</td>\n",
       "      <td>116</td>\n",
       "      <td>07/03/2019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>158639</th>\n",
       "      <td>2018-12-31</td>\n",
       "      <td>179000.0</td>\n",
       "      <td>&lt;{eengezinswoning}&gt; &lt;{geschakelde 2-onder-1-ka...</td>\n",
       "      <td>House</td>\n",
       "      <td>1995.0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>C</td>\n",
       "      <td>4613532</td>\n",
       "      <td>84</td>\n",
       "      <td>17/01/2019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>158640</th>\n",
       "      <td>2018-12-31</td>\n",
       "      <td>391500.0</td>\n",
       "      <td>&lt;{bungalow}&gt; &lt;{vrijstaande woning}&gt; (&lt;{semi-bu...</td>\n",
       "      <td>House</td>\n",
       "      <td>1948.0</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>C</td>\n",
       "      <td>4613537</td>\n",
       "      <td>99</td>\n",
       "      <td>03/08/2019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>158641</th>\n",
       "      <td>2018-12-12</td>\n",
       "      <td>395000.0</td>\n",
       "      <td>&lt;{eengezinswoning}&gt; &lt;{2-onder-1-kapwoning}&gt;</td>\n",
       "      <td>House</td>\n",
       "      <td>2019.0</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>C</td>\n",
       "      <td>4577856</td>\n",
       "      <td>156</td>\n",
       "      <td>30/01/2019</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>158642 rows × 11 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Publication_Date  Purchase_Price  \\\n",
       "0            2018-07-31        139000.0   \n",
       "1            2018-09-24        209000.0   \n",
       "2            2018-08-02        267500.0   \n",
       "3            2018-08-04        349000.0   \n",
       "4            2018-08-06        162500.0   \n",
       "...                 ...             ...   \n",
       "158637       2018-12-31        227500.0   \n",
       "158638       2018-12-31        159000.0   \n",
       "158639       2018-12-31        179000.0   \n",
       "158640       2018-12-31        391500.0   \n",
       "158641       2018-12-12        395000.0   \n",
       "\n",
       "                                              soortWoning categorieObject  \\\n",
       "0                     <{woonboot}> <{vrijstaande woning}>           House   \n",
       "1                    <{eengezinswoning}> <{tussenwoning}>           House   \n",
       "2                  <{tussenverdieping}> (<{appartement}>)       Apartment   \n",
       "3       <{eengezinswoning}> <{geschakelde 2-onder-1-ka...           House   \n",
       "4                      <{eengezinswoning}> <{hoekwoning}>           House   \n",
       "...                                                   ...             ...   \n",
       "158637               <{eengezinswoning}> <{tussenwoning}>           House   \n",
       "158638               <{eengezinswoning}> <{tussenwoning}>           House   \n",
       "158639  <{eengezinswoning}> <{geschakelde 2-onder-1-ka...           House   \n",
       "158640  <{bungalow}> <{vrijstaande woning}> (<{semi-bu...           House   \n",
       "158641        <{eengezinswoning}> <{2-onder-1-kapwoning}>           House   \n",
       "\n",
       "        Construction_Year  Garden  Number_of_rooms Energy_label  globalId.1  \\\n",
       "0                  1975.0       1                3            C     4388064   \n",
       "1                  1980.0       1                5            B     4388200   \n",
       "2                  2005.0       0                3            C     4399344   \n",
       "3                  1973.0       1                5            C     4400638   \n",
       "4                  1970.0       1                4            C     4401831   \n",
       "...                   ...     ...              ...          ...         ...   \n",
       "158637             2012.0       1                4            A     4613491   \n",
       "158638             1974.0       1                5            C     4613507   \n",
       "158639             1995.0       1                4            C     4613532   \n",
       "158640             1948.0       1                5            C     4613537   \n",
       "158641             2019.0       1                6            C     4577856   \n",
       "\n",
       "        inside_surface_size date_of_signage  \n",
       "0                        62      12/11/2018  \n",
       "1                       136      30/08/2018  \n",
       "2                        70      23/11/2018  \n",
       "3                       144      14/12/2018  \n",
       "4                        68      06/04/2019  \n",
       "...                     ...             ...  \n",
       "158637                  131      01/02/2019  \n",
       "158638                  116      07/03/2019  \n",
       "158639                   84      17/01/2019  \n",
       "158640                   99      03/08/2019  \n",
       "158641                  156      30/01/2019  \n",
       "\n",
       "[158642 rows x 11 columns]"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "housing_data_clean\n",
    "\n",
    "#displaying the dataframe to confirm the operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "unique_values_publication_date = housing_data_clean['Publication_Date'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['2018-07-31', '2018-09-24', '2018-08-02', '2018-08-04',\n",
       "       '2018-08-06', '2018-08-12', '2018-08-09', '2018-08-17',\n",
       "       '2018-08-01', '2018-08-03', '2018-08-20', '2018-09-15',\n",
       "       '2018-10-10', '2018-08-10', '2018-08-15', '2018-08-21',\n",
       "       '2018-08-27', '2018-08-16', '2018-08-08', '2018-08-30',\n",
       "       '2018-08-31', '2018-09-01', '2018-09-05', '2018-09-06',\n",
       "       '2018-09-07', '2018-09-13', '2018-09-21', '2018-09-27',\n",
       "       '2018-10-03', '2018-09-08', '2018-09-11', '2018-09-14',\n",
       "       '2018-10-25', '2018-10-26', '2018-09-23', '2018-09-25',\n",
       "       '2018-09-18', '2018-10-04', '2018-10-31', '2018-09-19',\n",
       "       '2018-10-11', '2018-11-01', '2018-09-10', '2018-10-09',\n",
       "       '2018-10-19', '2018-11-03', '2018-10-12', '2018-10-20',\n",
       "       '2018-09-28', '2018-10-23', '2018-11-06', '2018-10-13',\n",
       "       '2018-10-02', '2018-10-22', '2018-11-22', '2018-12-12',\n",
       "       '2018-11-09', '2018-08-29', '2018-12-13', '2018-12-15',\n",
       "       '2018-11-04', '2018-11-21', '2018-11-07', '2018-11-13',\n",
       "       '2018-11-15', '2018-10-27', '2018-11-26', '2018-11-14',\n",
       "       '2018-11-19', '2018-11-27', '2018-10-18', '2018-11-08',\n",
       "       '2018-11-17', '2018-12-14', '2018-11-10', '2018-12-11',\n",
       "       '2018-11-23', '2018-12-04', '2018-12-16', '2018-09-20',\n",
       "       '2018-09-22', '2018-08-07', '2018-09-16', '2018-10-05',\n",
       "       '2018-12-08', '2018-08-22', '2018-09-30', '2018-12-05',\n",
       "       '2018-12-07', '2018-09-02', '2018-12-01', '2018-11-20',\n",
       "       '2018-08-14', '2018-08-24', '2018-11-30', '2018-10-08',\n",
       "       '2018-09-12', '2018-09-17', '2018-08-13', '2018-10-30',\n",
       "       '2018-08-18', '2018-10-15', '2018-11-28', '2018-12-18',\n",
       "       '2018-08-11', '2018-12-21', '2018-10-16', '2018-09-03',\n",
       "       '2018-10-06', '2018-08-23', '2018-08-28', '2018-09-04',\n",
       "       '2018-11-02', '2018-12-20', '2018-08-25', '2018-10-01',\n",
       "       '2018-09-26', '2018-09-29', '2018-10-21', '2018-10-07',\n",
       "       '2018-10-24', '2018-10-17', '2018-11-05', '2018-10-14',\n",
       "       '2018-11-16', '2018-10-29', '2018-10-28', '2018-11-24',\n",
       "       '2018-11-12', '2018-11-29', '2018-12-10', '2018-12-06',\n",
       "       '2018-12-03', '2018-12-19', '2018-12-24', '2018-12-22',\n",
       "       '2018-12-28', '2018-12-31', '2018-12-09', '2018-12-17',\n",
       "       '2018-12-25', '2018-12-27', '2018-11-11', '2018-08-19',\n",
       "       '2018-12-02', '2018-11-18', '2018-11-25', '2018-06-26',\n",
       "       '2018-01-19', '2018-01-16', '2018-01-10', '2018-01-26',\n",
       "       '2018-03-05', '2018-02-14', '2018-02-20', '2018-01-09',\n",
       "       '2018-01-02', '2018-01-04', '2018-01-03', '2018-01-08',\n",
       "       '2018-01-05', '2018-01-06', '2018-01-07', '2018-01-17',\n",
       "       '2018-02-19', '2018-01-12', '2018-01-13', '2018-01-11',\n",
       "       '2018-03-03', '2018-02-13', '2018-02-01', '2018-02-12',\n",
       "       '2018-01-15', '2018-01-18', '2018-01-14', '2018-02-23',\n",
       "       '2018-01-27', '2018-02-28', '2018-01-01', '2018-02-15',\n",
       "       '2018-01-25', '2018-01-20', '2018-01-22', '2018-01-23',\n",
       "       '2018-01-24', '2018-01-21', '2018-01-28', '2018-01-30',\n",
       "       '2018-01-29', '2018-01-31', '2018-02-02', '2018-02-03',\n",
       "       '2018-02-04', '2018-02-06', '2018-02-09', '2018-02-07',\n",
       "       '2018-02-08', '2018-02-10', '2018-02-11', '2018-06-01',\n",
       "       '2018-02-17', '2018-03-16', '2018-03-01', '2018-06-11',\n",
       "       '2018-05-22', '2018-02-16', '2018-06-05', '2018-06-04',\n",
       "       '2018-02-18', '2018-02-21', '2018-02-22', '2018-02-24',\n",
       "       '2018-03-04', '2018-02-27', '2018-03-02', '2018-03-06',\n",
       "       '2018-03-07', '2018-03-11', '2018-08-26', '2018-05-01',\n",
       "       '2018-04-09', '2018-03-17', '2018-04-03', '2018-04-13',\n",
       "       '2018-03-13', '2018-02-05', '2018-03-30', '2018-04-01',\n",
       "       '2018-03-15', '2018-04-06', '2018-02-25', '2018-03-08',\n",
       "       '2018-03-09', '2018-02-26', '2018-03-10', '2018-03-14',\n",
       "       '2018-03-12', '2018-03-23', '2018-03-18', '2018-03-20',\n",
       "       '2018-03-31', '2018-03-19', '2018-03-21', '2018-03-22',\n",
       "       '2018-03-25', '2018-03-24', '2018-04-05', '2018-03-26',\n",
       "       '2018-03-29', '2018-03-28', '2018-03-27', '2018-04-18',\n",
       "       '2018-05-07', '2018-04-02', '2018-04-04', '2018-04-19',\n",
       "       '2018-04-11', '2018-04-07', '2018-04-08', '2018-04-10',\n",
       "       '2018-04-20', '2018-04-12', '2018-04-14', '2018-04-15',\n",
       "       '2018-04-16', '2018-04-17', '2018-05-08', '2018-04-28',\n",
       "       '2018-05-28', '2018-04-21', '2018-04-29', '2018-04-24',\n",
       "       '2018-04-30', '2018-04-23', '2018-04-25', '2018-04-26',\n",
       "       '2018-04-27', '2018-04-22', '2018-05-02', '2018-05-03',\n",
       "       '2018-05-04', '2018-05-05', '2018-05-06', '2018-05-09',\n",
       "       '2018-05-10', '2018-05-11', '2018-05-14', '2018-05-12',\n",
       "       '2018-05-13', '2018-05-15', '2018-05-16', '2018-05-18',\n",
       "       '2018-05-17', '2018-05-21', '2018-05-19', '2018-06-06',\n",
       "       '2018-05-20', '2018-05-24', '2018-05-23', '2018-05-25',\n",
       "       '2018-05-26', '2018-05-29', '2018-05-27', '2018-05-31',\n",
       "       '2018-06-08', '2018-05-30', '2018-06-27', '2018-06-02',\n",
       "       '2018-06-03', '2018-06-07', '2018-06-09', '2018-06-10',\n",
       "       '2018-06-13', '2018-06-12', '2018-06-14', '2018-06-15',\n",
       "       '2018-06-16', '2018-06-20', '2018-06-17', '2018-06-18',\n",
       "       '2018-06-21', '2018-06-19', '2018-07-11', '2018-06-22',\n",
       "       '2018-06-28', '2018-06-23', '2018-06-25', '2018-06-24',\n",
       "       '2018-06-30', '2018-06-29', '2018-07-02', '2018-07-01',\n",
       "       '2018-07-04', '2018-07-03', '2018-07-05', '2018-07-06',\n",
       "       '2018-07-07', '2018-07-12', '2018-07-09', '2018-07-10',\n",
       "       '2018-07-13', '2018-07-08', '2018-07-14', '2018-07-16',\n",
       "       '2018-07-15', '2018-07-17', '2018-07-20', '2018-07-27',\n",
       "       '2018-09-09', '2018-07-18', '2018-07-24', '2018-07-29',\n",
       "       '2018-07-21', '2018-07-25', '2018-07-23', '2018-07-26',\n",
       "       '2018-07-19', '2018-07-22', '2018-12-30', '2018-07-28',\n",
       "       '2018-07-30', '2018-08-05', '2018-12-26', '2018-12-29',\n",
       "       '2018-12-23'], dtype=object)"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "unique_values_publication_date"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "unique_values_date_of_signage = housing_data_clean['date_of_signage'].unique()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['12/11/2018', '30/08/2018', '23/11/2018', '14/12/2018',\n",
       "       '06/04/2019', '15/03/2019', '28/02/2019', '10/09/2018',\n",
       "       '20/06/2019', '24/08/2018', '01/01/2019', '31/08/2018',\n",
       "       '27/12/2018', '30/01/2019', '23/08/2018', '05/11/2018',\n",
       "       '01/03/2019', '06/08/2018', '21/08/2018', '28/11/2018',\n",
       "       '04/09/2018', '24/09/2018', '27/09/2018', '21/11/2018',\n",
       "       '10/12/2018', '29/08/2018', '22/11/2018', '25/01/2019',\n",
       "       '19/09/2018', '17/09/2018', '25/09/2018', '09/10/2018',\n",
       "       '25/10/2018', '05/12/2018', '30/10/2018', '26/03/2019',\n",
       "       '03/09/2018', '02/10/2018', '07/03/2019', '26/09/2018',\n",
       "       '01/10/2018', '01/11/2018', '26/01/2019', '15/11/2018',\n",
       "       '22/03/2019', '21/09/2018', '22/12/2018', '17/10/2018',\n",
       "       '31/12/2018', '09/11/2018', '03/10/2018', '10/04/2019',\n",
       "       '01/09/2018', '07/11/2018', '29/10/2018', '02/11/2018',\n",
       "       '03/05/2019', '19/11/2018', '16/11/2018', '20/12/2018',\n",
       "       '21/01/2019', '12/03/2019', '05/09/2018', '11/04/2019',\n",
       "       '08/11/2018', '20/11/2018', '31/10/2018', '18/03/2019',\n",
       "       '08/04/2019', '03/01/2019', '24/01/2019', '26/02/2019',\n",
       "       '03/04/2019', '17/11/2018', '22/04/2019', '06/05/2019',\n",
       "       '11/12/2018', '29/05/2019', '29/11/2018', '03/12/2018',\n",
       "       '26/10/2018', '24/12/2018', '07/02/2019', '03/06/2019',\n",
       "       '18/01/2019', '25/06/2019', '21/12/2018', '07/06/2019',\n",
       "       '07/12/2018', '08/03/2019', '14/02/2019', '13/11/2018',\n",
       "       '10/11/2018', '01/08/2019', '12/08/2019', '12/12/2018',\n",
       "       '16/04/2019', '09/05/2019', '29/01/2019', '04/02/2019',\n",
       "       '17/04/2019', '28/01/2019', '15/08/2018', '18/09/2018',\n",
       "       '16/01/2019', '09/01/2019', '22/08/2018', '01/12/2018',\n",
       "       '28/09/2018', '05/10/2018', '24/10/2018', '19/10/2018',\n",
       "       '01/02/2019', '15/09/2018', '11/09/2018', '17/05/2019',\n",
       "       '01/07/2019', '17/01/2019', '22/06/2019', '16/02/2019',\n",
       "       '31/05/2019', '28/12/2018', '28/06/2019', '04/12/2018',\n",
       "       '07/01/2019', '01/04/2019', '10/01/2019', '10/10/2018',\n",
       "       '04/01/2019', '13/02/2019', '01/06/2019', '19/02/2019',\n",
       "       '05/04/2019', '31/01/2019', '20/09/2018', '11/01/2019',\n",
       "       '04/10/2018', '04/04/2019', '15/01/2019', '24/03/2019',\n",
       "       '13/01/2019', '26/11/2018', '04/05/2019', '23/08/2019',\n",
       "       '17/08/2018', '09/04/2019', '30/04/2019', '19/12/2018',\n",
       "       '27/10/2018', '11/03/2019', '25/02/2019', '04/03/2019',\n",
       "       '25/03/2019', '17/12/2018', '21/02/2019', '05/01/2019',\n",
       "       '20/03/2019', '14/11/2018', '20/02/2019', '11/02/2019',\n",
       "       '14/01/2019', '03/11/2018', '06/02/2019', '06/12/2018',\n",
       "       '15/02/2019', '15/04/2019', '22/10/2018', '12/10/2018',\n",
       "       '27/08/2018', '18/08/2018', '07/08/2018', '26/04/2019',\n",
       "       '09/08/2018', '11/11/2018', '28/08/2018', '08/08/2018',\n",
       "       '30/11/2018', '14/09/2018', '20/10/2018', '13/09/2018',\n",
       "       '01/08/2018', '02/08/2018', '22/01/2019', '07/09/2018',\n",
       "       '17/03/2019', '14/08/2018', '15/10/2018', '19/04/2019',\n",
       "       '23/10/2018', '18/04/2019', '16/10/2018', '20/08/2018',\n",
       "       '01/05/2019', '02/05/2019', '06/11/2018', '02/02/2019',\n",
       "       '30/06/2019', '06/09/2018', '21/06/2019', '21/05/2019',\n",
       "       '21/03/2019', '20/01/2019', '12/09/2018', '02/01/2019',\n",
       "       '23/09/2018', '24/04/2019', '10/05/2019', '24/11/2018',\n",
       "       '16/03/2019', '19/07/2019', '25/07/2019', '18/10/2018',\n",
       "       '08/10/2018', '29/09/2018', '02/04/2019', '22/05/2019',\n",
       "       '23/01/2019', '26/07/2019', '25/04/2019', '22/02/2019',\n",
       "       '18/02/2019', '05/02/2019', '02/07/2019', '15/12/2018',\n",
       "       '08/01/2019', '28/03/2019', '29/03/2019', '14/05/2019',\n",
       "       '05/08/2019', '27/02/2019', '27/11/2018', '18/12/2018',\n",
       "       '08/05/2019', '10/07/2019', '06/09/2019', '11/10/2018',\n",
       "       '13/08/2019', '26/12/2018', '13/12/2018', '25/11/2018',\n",
       "       '15/07/2019', '06/06/2019', '27/06/2019', '08/02/2019',\n",
       "       '23/12/2018', '14/03/2019', '12/01/2019', '17/06/2019',\n",
       "       '12/02/2019', '05/03/2019', '20/05/2019', '13/05/2019',\n",
       "       '23/03/2019', '13/03/2019', '08/07/2019', '16/12/2018',\n",
       "       '16/05/2019', '06/03/2019', '19/03/2019', '26/08/2019',\n",
       "       '16/08/2019', '23/02/2019', '15/05/2019', '05/07/2019',\n",
       "       '19/01/2019', '07/08/2019', '09/12/2018', '11/06/2019',\n",
       "       '13/07/2019', '12/06/2019', '23/04/2019', '07/04/2019',\n",
       "       '24/05/2019', '13/06/2019', '30/03/2019', '27/03/2019',\n",
       "       '29/08/2019', '03/03/2019', '22/09/2018', '24/07/2019',\n",
       "       '30/09/2018', '10/06/2019', '05/06/2019', '29/04/2019',\n",
       "       '20/09/2019', '16/07/2019', '04/07/2017', '10/02/2019',\n",
       "       '14/06/2019', '19/06/2019', '30/08/2019', '18/03/2018',\n",
       "       '12/04/2019', '07/04/2018', '07/03/2018', '01/03/2018',\n",
       "       '10/04/2018', '23/03/2018', '02/05/2018', '02/03/2018',\n",
       "       '14/03/2018', '22/03/2018', '23/02/2018', '15/02/2018',\n",
       "       '09/02/2018', '16/02/2018', '05/03/2018', '13/02/2018',\n",
       "       '05/02/2018', '17/01/2018', '07/02/2018', '27/02/2018',\n",
       "       '21/03/2018', '08/02/2018', '23/01/2018', '24/01/2018',\n",
       "       '31/01/2018', '30/01/2018', '12/02/2018', '01/02/2018',\n",
       "       '15/03/2018', '02/02/2018', '30/03/2018', '26/01/2018',\n",
       "       '06/02/2018', '21/02/2018', '18/01/2018', '13/03/2018',\n",
       "       '19/03/2018', '25/01/2018', '08/03/2018', '04/12/2017',\n",
       "       '23/07/2018', '02/01/2018', '03/01/2018', '19/02/2018',\n",
       "       '22/02/2018', '19/01/2018', '10/01/2018', '15/01/2018',\n",
       "       '13/01/2018', '04/04/2018', '22/01/2018', '06/03/2018',\n",
       "       '14/02/2018', '20/01/2018', '12/01/2018', '24/09/2017',\n",
       "       '01/12/2017', '04/02/2018', '10/02/2018', '09/12/2017',\n",
       "       '04/01/2018', '09/04/2018', '20/02/2018', '28/12/2017',\n",
       "       '05/01/2018', '19/07/2018', '16/01/2018', '29/01/2018',\n",
       "       '03/03/2018', '08/12/2018', '29/12/2017', '08/01/2018',\n",
       "       '25/07/2018', '11/01/2018', '21/01/2018', '06/04/2018',\n",
       "       '18/02/2018', '27/07/2019', '12/07/2019', '28/02/2018',\n",
       "       '27/01/2018', '12/03/2018', '26/02/2018', '24/03/2018',\n",
       "       '24/02/2018', '09/01/2018', '25/02/2018', '28/01/2018',\n",
       "       '03/02/2018', '16/07/2018', '31/03/2018', '11/02/2018',\n",
       "       '30/07/2018', '17/02/2018', '16/08/2018', '10/07/2018',\n",
       "       '13/08/2018', '11/05/2019', '29/12/2018', '30/05/2018',\n",
       "       '22/06/2018', '11/07/2018', '17/07/2018', '03/05/2018',\n",
       "       '27/06/2018', '03/07/2018', '26/03/2018', '07/06/2018',\n",
       "       '03/08/2018', '06/01/2018', '26/04/2018', '31/07/2018',\n",
       "       '29/03/2018', '04/03/2018', '08/06/2018', '27/07/2018',\n",
       "       '12/06/2018', '24/04/2018', '23/04/2018', '10/03/2018',\n",
       "       '09/02/2019', '06/06/2018', '11/04/2018', '03/04/2018',\n",
       "       '27/04/2018', '20/06/2018', '25/03/2018', '20/03/2018',\n",
       "       '25/06/2018', '25/04/2018', '22/05/2018', '28/03/2018',\n",
       "       '12/04/2018', '09/05/2018', '30/04/2018', '16/03/2018',\n",
       "       '23/05/2018', '16/04/2018', '27/03/2018', '31/05/2018',\n",
       "       '09/03/2018', '11/05/2018', '27/10/2017', '27/11/2017',\n",
       "       '13/04/2018', '17/03/2018', '25/08/2018', '22/12/2017',\n",
       "       '18/06/2018', '20/04/2018', '28/04/2018', '18/07/2018',\n",
       "       '18/04/2018', '01/06/2018', '16/09/2018', '01/05/2018',\n",
       "       '08/05/2018', '02/07/2018', '28/10/2018', '12/07/2018',\n",
       "       '06/07/2018', '21/06/2018', '14/07/2018', '16/05/2018',\n",
       "       '24/05/2018', '25/05/2018', '13/06/2018', '22/04/2018',\n",
       "       '05/04/2018', '09/06/2018', '28/05/2018', '18/12/2017',\n",
       "       '28/07/2018', '07/05/2018', '01/07/2018', '26/05/2018',\n",
       "       '19/04/2018', '29/05/2018', '18/05/2018', '15/06/2018',\n",
       "       '13/07/2018', '02/04/2018', '05/06/2018', '25/05/2019',\n",
       "       '17/04/2018', '14/06/2018', '07/01/2018', '11/06/2018',\n",
       "       '28/06/2018', '11/03/2018', '01/04/2018', '14/05/2018',\n",
       "       '19/06/2018', '26/06/2018', '14/10/2018', '04/05/2018',\n",
       "       '06/10/2018', '09/07/2018', '21/04/2018', '08/04/2018',\n",
       "       '17/05/2018', '14/04/2018', '15/05/2018', '12/05/2018',\n",
       "       '20/05/2018', '21/07/2018', '17/06/2018', '30/06/2018',\n",
       "       '10/08/2018', '06/05/2018', '26/07/2018', '07/07/2018',\n",
       "       '29/04/2018', '10/05/2018', '15/07/2018', '16/06/2018',\n",
       "       '11/08/2018', '29/06/2018', '27/05/2018', '04/06/2018',\n",
       "       '24/07/2018', '19/05/2018', '21/10/2018', '05/05/2018',\n",
       "       '20/08/2019', '23/06/2018', '15/06/2019', '04/07/2018',\n",
       "       '21/05/2018', '18/05/2019', '15/04/2018', '05/07/2018',\n",
       "       '13/09/2019', '04/06/2019', '29/07/2019', '02/12/2018',\n",
       "       '20/07/2018', '08/09/2018', '02/06/2018', '04/08/2018',\n",
       "       '05/08/2018', '22/07/2019', '09/09/2018', '16/09/2019',\n",
       "       '03/06/2018', '02/03/2019', '13/05/2018', '12/08/2018',\n",
       "       '07/05/2019', '30/12/2018', '08/07/2018', '28/05/2019',\n",
       "       '02/09/2018', '26/06/2019', '10/06/2018', '29/06/2019',\n",
       "       '17/08/2019', '30/07/2019', '13/10/2018', '28/08/2019',\n",
       "       '06/01/2019', '24/06/2018', '19/08/2018', '28/04/2019',\n",
       "       '27/08/2019', '16/06/2019', '27/04/2019', '03/08/2019',\n",
       "       '27/05/2019', '22/07/2018', '25/12/2018', '26/08/2018',\n",
       "       '29/07/2018', '18/07/2019', '23/05/2019', '06/07/2019',\n",
       "       '07/07/2019', '03/07/2019', '31/07/2019', '04/11/2018',\n",
       "       '14/04/2019', '18/11/2018', '14/01/2018', '13/04/2019',\n",
       "       '09/08/2019', '20/07/2019', '18/06/2019', '09/03/2019',\n",
       "       '24/06/2019', '23/06/2019', '03/02/2019', '09/07/2019',\n",
       "       '21/04/2019', '23/07/2019', '04/07/2019', '15/08/2019',\n",
       "       '24/09/2019', '10/03/2019', '06/08/2019', '02/09/2019',\n",
       "       '17/07/2019', '19/08/2019', '20/04/2019', '27/12/2017',\n",
       "       '07/10/2018', '05/09/2019', '21/08/2019', '23/09/2019',\n",
       "       '08/08/2019', '18/08/2019', '12/09/2019', '27/09/2019',\n",
       "       '19/05/2019', '09/09/2019', '04/09/2019', '11/07/2019',\n",
       "       '22/09/2019', '19/09/2019', '31/03/2019', '25/09/2019',\n",
       "       '01/09/2019', '17/02/2019', '22/08/2019', '14/08/2019',\n",
       "       '08/03/2017', '12/05/2019', '24/02/2019', '16/12/2017',\n",
       "       '05/05/2019', '17/09/2019', '27/01/2019', '28/07/2019',\n",
       "       '10/08/2019', '11/09/2019', '02/08/2019', '03/09/2019',\n",
       "       '08/06/2019', '11/08/2019', '26/09/2019', '30/05/2019',\n",
       "       '10/09/2019', '14/09/2019', '21/09/2019', '02/06/2019',\n",
       "       '24/08/2019', '26/05/2019', '09/06/2019', '31/08/2019',\n",
       "       '18/09/2019'], dtype=object)"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "unique_values_date_of_signage"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Based on the code above, the publication date column has a lot of different values, all from the same year. Hence, using this variable does not make sense as it would need to be treated as a categorical value. With more than 300 values present, the one-hot encoding would create 300 new columns in the dataset in addition to the columns created from the more important categorical variables soortwoning, categorieObject, and Energy Label.\n",
    "\n",
    "The same can be said about the date of signage column. One option would be to re-code both these columns into singular year values, however, these two columns both contain only the years 2018 and 2019. The value this would bring to the machine learning models is small, hence, these variables will not be included in further analysis and performance of models.\n",
    "\n",
    "Same can be said about the globalId.1 variable."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Encoding categorical variables and splitting data into Train set and Test set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = housing_data_clean[['soortWoning','categorieObject','Construction_Year','Garden','Number_of_rooms','Energy_label','inside_surface_size']]\n",
    "y = housing_data_clean['Purchase_Price']\n",
    "\n",
    "#assigning all of the columns to their respective dataframes (X=independent variables,Y=dependent variable)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>soortWoning</th>\n",
       "      <th>categorieObject</th>\n",
       "      <th>Construction_Year</th>\n",
       "      <th>Garden</th>\n",
       "      <th>Number_of_rooms</th>\n",
       "      <th>Energy_label</th>\n",
       "      <th>inside_surface_size</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>&lt;{woonboot}&gt; &lt;{vrijstaande woning}&gt;</td>\n",
       "      <td>House</td>\n",
       "      <td>1975.0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>C</td>\n",
       "      <td>62</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>&lt;{eengezinswoning}&gt; &lt;{tussenwoning}&gt;</td>\n",
       "      <td>House</td>\n",
       "      <td>1980.0</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>B</td>\n",
       "      <td>136</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>&lt;{tussenverdieping}&gt; (&lt;{appartement}&gt;)</td>\n",
       "      <td>Apartment</td>\n",
       "      <td>2005.0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>C</td>\n",
       "      <td>70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>&lt;{eengezinswoning}&gt; &lt;{geschakelde 2-onder-1-ka...</td>\n",
       "      <td>House</td>\n",
       "      <td>1973.0</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>C</td>\n",
       "      <td>144</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>&lt;{eengezinswoning}&gt; &lt;{hoekwoning}&gt;</td>\n",
       "      <td>House</td>\n",
       "      <td>1970.0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>C</td>\n",
       "      <td>68</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>158637</th>\n",
       "      <td>&lt;{eengezinswoning}&gt; &lt;{tussenwoning}&gt;</td>\n",
       "      <td>House</td>\n",
       "      <td>2012.0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>A</td>\n",
       "      <td>131</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>158638</th>\n",
       "      <td>&lt;{eengezinswoning}&gt; &lt;{tussenwoning}&gt;</td>\n",
       "      <td>House</td>\n",
       "      <td>1974.0</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>C</td>\n",
       "      <td>116</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>158639</th>\n",
       "      <td>&lt;{eengezinswoning}&gt; &lt;{geschakelde 2-onder-1-ka...</td>\n",
       "      <td>House</td>\n",
       "      <td>1995.0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>C</td>\n",
       "      <td>84</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>158640</th>\n",
       "      <td>&lt;{bungalow}&gt; &lt;{vrijstaande woning}&gt; (&lt;{semi-bu...</td>\n",
       "      <td>House</td>\n",
       "      <td>1948.0</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>C</td>\n",
       "      <td>99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>158641</th>\n",
       "      <td>&lt;{eengezinswoning}&gt; &lt;{2-onder-1-kapwoning}&gt;</td>\n",
       "      <td>House</td>\n",
       "      <td>2019.0</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>C</td>\n",
       "      <td>156</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>158642 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                              soortWoning categorieObject  \\\n",
       "0                     <{woonboot}> <{vrijstaande woning}>           House   \n",
       "1                    <{eengezinswoning}> <{tussenwoning}>           House   \n",
       "2                  <{tussenverdieping}> (<{appartement}>)       Apartment   \n",
       "3       <{eengezinswoning}> <{geschakelde 2-onder-1-ka...           House   \n",
       "4                      <{eengezinswoning}> <{hoekwoning}>           House   \n",
       "...                                                   ...             ...   \n",
       "158637               <{eengezinswoning}> <{tussenwoning}>           House   \n",
       "158638               <{eengezinswoning}> <{tussenwoning}>           House   \n",
       "158639  <{eengezinswoning}> <{geschakelde 2-onder-1-ka...           House   \n",
       "158640  <{bungalow}> <{vrijstaande woning}> (<{semi-bu...           House   \n",
       "158641        <{eengezinswoning}> <{2-onder-1-kapwoning}>           House   \n",
       "\n",
       "        Construction_Year  Garden  Number_of_rooms Energy_label  \\\n",
       "0                  1975.0       1                3            C   \n",
       "1                  1980.0       1                5            B   \n",
       "2                  2005.0       0                3            C   \n",
       "3                  1973.0       1                5            C   \n",
       "4                  1970.0       1                4            C   \n",
       "...                   ...     ...              ...          ...   \n",
       "158637             2012.0       1                4            A   \n",
       "158638             1974.0       1                5            C   \n",
       "158639             1995.0       1                4            C   \n",
       "158640             1948.0       1                5            C   \n",
       "158641             2019.0       1                6            C   \n",
       "\n",
       "        inside_surface_size  \n",
       "0                        62  \n",
       "1                       136  \n",
       "2                        70  \n",
       "3                       144  \n",
       "4                        68  \n",
       "...                     ...  \n",
       "158637                  131  \n",
       "158638                  116  \n",
       "158639                   84  \n",
       "158640                   99  \n",
       "158641                  156  \n",
       "\n",
       "[158642 rows x 7 columns]"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X #showing the dataframe to see if the operation has been successful"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I will first be splitting my data into train and test sets to prevent data leakage, and prevent a biased model. Afterwards, I will be scaling both of the sets separately. Before that I will one-hot encode the categorical columns."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "categorical_columns = ['categorieObject','Energy_label','soortWoning']\n",
    "#selecting the categorical columns for encoding"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_encoded = pd.get_dummies(X,columns=categorical_columns)\n",
    "\n",
    "#enconding the categorical variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Construction_Year</th>\n",
       "      <th>Garden</th>\n",
       "      <th>Number_of_rooms</th>\n",
       "      <th>inside_surface_size</th>\n",
       "      <th>categorieObject_Apartment</th>\n",
       "      <th>categorieObject_House</th>\n",
       "      <th>Energy_label_A</th>\n",
       "      <th>Energy_label_A+</th>\n",
       "      <th>Energy_label_A++</th>\n",
       "      <th>Energy_label_A+++</th>\n",
       "      <th>...</th>\n",
       "      <th>soortWoning_&lt;{villa}&gt; &lt;{vrijstaande woning}&gt; (&lt;{waterwoning}&gt;)</th>\n",
       "      <th>soortWoning_&lt;{woonboerderij}&gt; &lt;{2-onder-1-kapwoning}&gt;</th>\n",
       "      <th>soortWoning_&lt;{woonboerderij}&gt; &lt;{geschakelde woning}&gt;</th>\n",
       "      <th>soortWoning_&lt;{woonboerderij}&gt; &lt;{halfvrijstaande woning}&gt;</th>\n",
       "      <th>soortWoning_&lt;{woonboerderij}&gt; &lt;{hoekwoning}&gt;</th>\n",
       "      <th>soortWoning_&lt;{woonboerderij}&gt; &lt;{tussenwoning}&gt;</th>\n",
       "      <th>soortWoning_&lt;{woonboerderij}&gt; &lt;{vrijstaande woning}&gt;</th>\n",
       "      <th>soortWoning_&lt;{woonboerderij}&gt; &lt;{vrijstaande woning}&gt; (&lt;{dijkwoning}&gt;)</th>\n",
       "      <th>soortWoning_&lt;{woonboot}&gt; &lt;{vrijstaande woning}&gt;</th>\n",
       "      <th>soortWoning_&lt;{woonboot}&gt; &lt;{vrijstaande woning}&gt; (&lt;{waterwoning}&gt;)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1975.0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>62</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1980.0</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>136</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2005.0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>70</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1973.0</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>144</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1970.0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>68</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>158637</th>\n",
       "      <td>2012.0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>131</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>158638</th>\n",
       "      <td>1974.0</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>116</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>158639</th>\n",
       "      <td>1995.0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>84</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>158640</th>\n",
       "      <td>1948.0</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>99</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>158641</th>\n",
       "      <td>2019.0</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>156</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>158642 rows × 249 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Construction_Year  Garden  Number_of_rooms  inside_surface_size  \\\n",
       "0                  1975.0       1                3                   62   \n",
       "1                  1980.0       1                5                  136   \n",
       "2                  2005.0       0                3                   70   \n",
       "3                  1973.0       1                5                  144   \n",
       "4                  1970.0       1                4                   68   \n",
       "...                   ...     ...              ...                  ...   \n",
       "158637             2012.0       1                4                  131   \n",
       "158638             1974.0       1                5                  116   \n",
       "158639             1995.0       1                4                   84   \n",
       "158640             1948.0       1                5                   99   \n",
       "158641             2019.0       1                6                  156   \n",
       "\n",
       "        categorieObject_Apartment  categorieObject_House  Energy_label_A  \\\n",
       "0                           False                   True           False   \n",
       "1                           False                   True           False   \n",
       "2                            True                  False           False   \n",
       "3                           False                   True           False   \n",
       "4                           False                   True           False   \n",
       "...                           ...                    ...             ...   \n",
       "158637                      False                   True            True   \n",
       "158638                      False                   True           False   \n",
       "158639                      False                   True           False   \n",
       "158640                      False                   True           False   \n",
       "158641                      False                   True           False   \n",
       "\n",
       "        Energy_label_A+  Energy_label_A++  Energy_label_A+++  ...  \\\n",
       "0                 False             False              False  ...   \n",
       "1                 False             False              False  ...   \n",
       "2                 False             False              False  ...   \n",
       "3                 False             False              False  ...   \n",
       "4                 False             False              False  ...   \n",
       "...                 ...               ...                ...  ...   \n",
       "158637            False             False              False  ...   \n",
       "158638            False             False              False  ...   \n",
       "158639            False             False              False  ...   \n",
       "158640            False             False              False  ...   \n",
       "158641            False             False              False  ...   \n",
       "\n",
       "        soortWoning_<{villa}> <{vrijstaande woning}> (<{waterwoning}>)  \\\n",
       "0                                                   False                \n",
       "1                                                   False                \n",
       "2                                                   False                \n",
       "3                                                   False                \n",
       "4                                                   False                \n",
       "...                                                   ...                \n",
       "158637                                              False                \n",
       "158638                                              False                \n",
       "158639                                              False                \n",
       "158640                                              False                \n",
       "158641                                              False                \n",
       "\n",
       "        soortWoning_<{woonboerderij}> <{2-onder-1-kapwoning}>  \\\n",
       "0                                                   False       \n",
       "1                                                   False       \n",
       "2                                                   False       \n",
       "3                                                   False       \n",
       "4                                                   False       \n",
       "...                                                   ...       \n",
       "158637                                              False       \n",
       "158638                                              False       \n",
       "158639                                              False       \n",
       "158640                                              False       \n",
       "158641                                              False       \n",
       "\n",
       "        soortWoning_<{woonboerderij}> <{geschakelde woning}>  \\\n",
       "0                                                   False      \n",
       "1                                                   False      \n",
       "2                                                   False      \n",
       "3                                                   False      \n",
       "4                                                   False      \n",
       "...                                                   ...      \n",
       "158637                                              False      \n",
       "158638                                              False      \n",
       "158639                                              False      \n",
       "158640                                              False      \n",
       "158641                                              False      \n",
       "\n",
       "        soortWoning_<{woonboerderij}> <{halfvrijstaande woning}>  \\\n",
       "0                                                   False          \n",
       "1                                                   False          \n",
       "2                                                   False          \n",
       "3                                                   False          \n",
       "4                                                   False          \n",
       "...                                                   ...          \n",
       "158637                                              False          \n",
       "158638                                              False          \n",
       "158639                                              False          \n",
       "158640                                              False          \n",
       "158641                                              False          \n",
       "\n",
       "        soortWoning_<{woonboerderij}> <{hoekwoning}>  \\\n",
       "0                                              False   \n",
       "1                                              False   \n",
       "2                                              False   \n",
       "3                                              False   \n",
       "4                                              False   \n",
       "...                                              ...   \n",
       "158637                                         False   \n",
       "158638                                         False   \n",
       "158639                                         False   \n",
       "158640                                         False   \n",
       "158641                                         False   \n",
       "\n",
       "        soortWoning_<{woonboerderij}> <{tussenwoning}>  \\\n",
       "0                                                False   \n",
       "1                                                False   \n",
       "2                                                False   \n",
       "3                                                False   \n",
       "4                                                False   \n",
       "...                                                ...   \n",
       "158637                                           False   \n",
       "158638                                           False   \n",
       "158639                                           False   \n",
       "158640                                           False   \n",
       "158641                                           False   \n",
       "\n",
       "        soortWoning_<{woonboerderij}> <{vrijstaande woning}>  \\\n",
       "0                                                   False      \n",
       "1                                                   False      \n",
       "2                                                   False      \n",
       "3                                                   False      \n",
       "4                                                   False      \n",
       "...                                                   ...      \n",
       "158637                                              False      \n",
       "158638                                              False      \n",
       "158639                                              False      \n",
       "158640                                              False      \n",
       "158641                                              False      \n",
       "\n",
       "        soortWoning_<{woonboerderij}> <{vrijstaande woning}> (<{dijkwoning}>)  \\\n",
       "0                                                   False                       \n",
       "1                                                   False                       \n",
       "2                                                   False                       \n",
       "3                                                   False                       \n",
       "4                                                   False                       \n",
       "...                                                   ...                       \n",
       "158637                                              False                       \n",
       "158638                                              False                       \n",
       "158639                                              False                       \n",
       "158640                                              False                       \n",
       "158641                                              False                       \n",
       "\n",
       "        soortWoning_<{woonboot}> <{vrijstaande woning}>  \\\n",
       "0                                                  True   \n",
       "1                                                 False   \n",
       "2                                                 False   \n",
       "3                                                 False   \n",
       "4                                                 False   \n",
       "...                                                 ...   \n",
       "158637                                            False   \n",
       "158638                                            False   \n",
       "158639                                            False   \n",
       "158640                                            False   \n",
       "158641                                            False   \n",
       "\n",
       "        soortWoning_<{woonboot}> <{vrijstaande woning}> (<{waterwoning}>)  \n",
       "0                                                   False                  \n",
       "1                                                   False                  \n",
       "2                                                   False                  \n",
       "3                                                   False                  \n",
       "4                                                   False                  \n",
       "...                                                   ...                  \n",
       "158637                                              False                  \n",
       "158638                                              False                  \n",
       "158639                                              False                  \n",
       "158640                                              False                  \n",
       "158641                                              False                  \n",
       "\n",
       "[158642 rows x 249 columns]"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_encoded\n",
    "\n",
    "#double-checking if the encoding worked correctly"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0         139000.0\n",
       "1         209000.0\n",
       "2         267500.0\n",
       "3         349000.0\n",
       "4         162500.0\n",
       "            ...   \n",
       "158637    227500.0\n",
       "158638    159000.0\n",
       "158639    179000.0\n",
       "158640    391500.0\n",
       "158641    395000.0\n",
       "Name: Purchase_Price, Length: 158642, dtype: float64"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y\n",
    "\n",
    "#double-checking this dataframe only contains the target variable"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After encoding the categorical variables, I will split the data into training, validation and test sets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "#splitting the data into train, test, and validation sets to use for modelling\n",
    "X_train, X_temp, y_train, y_temp = train_test_split(X_encoded, y, test_size=0.2, random_state=42) #random state is set to a fixed value to ensure the samples are the same every run\n",
    "# Further split the temporary set into validation (50%) and testing (50%) sets\n",
    "X_validation, X_test, y_validation, y_test = train_test_split(X_temp, y_temp, test_size=0.5, random_state=42)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After checking the size of all of the sets, these match with the percentages so the split has been successful. I will now move on to scaling the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "#importing the standard scaler to scale the data properly"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I will only scale the input features. Scaling the output feature does not help in improving the model's ability to learn from the features."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "scaler = StandardScaler()\n",
    "#Fitting the scaler on training data and using it to transform training\n",
    "X_train = scaler.fit_transform(X_train)\n",
    "#now using the same scaler to transform test and validation data\n",
    "X_test = scaler.transform(X_test)\n",
    "X_validation = scaler.transform(X_validation)\n",
    "#scaling has been successful\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(15864, 249)\n"
     ]
    }
   ],
   "source": [
    "print(X_validation.shape)\n",
    "\n",
    "#printing the resulting dataframes to ensure the operation has been successful"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(15865, 249)\n"
     ]
    }
   ],
   "source": [
    "print(X_test.shape)\n",
    "\n",
    "#printing the resulting dataframes to ensure the operation has been successful"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(126913, 249)\n"
     ]
    }
   ],
   "source": [
    "print(X_train.shape)\n",
    "\n",
    "#printing the resulting dataframes to ensure the operation has been successful"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(126913,)\n"
     ]
    }
   ],
   "source": [
    "print(y_train.shape)\n",
    "\n",
    "#printing the resulting dataframes to ensure the operation has been successful"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Based on the above dataframe sizes, everything is set up correctly after scaling. I will now move on to performing the machine-learning models Neural Network, and Random Forest."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Neural Network"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The number of neurons for the input layer must be: 249\n"
     ]
    }
   ],
   "source": [
    "print(f\"The number of neurons for the input layer must be: {X_train.shape[1]}\")\n",
    "\n",
    "#identifying the correct number of neurons for the imput layer"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After identifying the correct number of neurons for the input layer, I will build the initial simple neural network."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\Users\\buoci\\anaconda3\\Lib\\site-packages\\keras\\src\\layers\\core\\dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
     ]
    }
   ],
   "source": [
    "Simple_nn_2 = Sequential()\n",
    "\n",
    "#start with a fairly simple neural network model with 2 hidden layers\n",
    "#first hidden layer\n",
    "Simple_nn_2.add(Dense(249, input_dim = X_train.shape[1],activation='relu'))\n",
    "#second hidden layer (249/2 = 124.5)\n",
    "Simple_nn_2.add(Dense(124, activation='relu'))\n",
    "#output layer\n",
    "Simple_nn_2.add(Dense(1,activation='linear'))\n",
    "\n",
    "#compiling the model with mean squared error loss and learning rate\n",
    "Simple_nn_2.compile(loss='mean_squared_error', optimizer='adam')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I will start with 25 epochs to see how the loss performs on training data. Afterwards I will make predictions with this initial model, and then move on to hyperparameter tuning."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/25\n",
      "\u001b[1m635/635\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 5ms/step - loss: 83049086976.0000 - val_loss: 31730352128.0000\n",
      "Epoch 2/25\n",
      "\u001b[1m635/635\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 5ms/step - loss: 18518530048.0000 - val_loss: 7955572224.0000\n",
      "Epoch 3/25\n",
      "\u001b[1m635/635\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - loss: 7689935360.0000 - val_loss: 7229220352.0000\n",
      "Epoch 4/25\n",
      "\u001b[1m635/635\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - loss: 7046843904.0000 - val_loss: 6904875008.0000\n",
      "Epoch 5/25\n",
      "\u001b[1m635/635\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - loss: 6799819776.0000 - val_loss: 6727068672.0000\n",
      "Epoch 6/25\n",
      "\u001b[1m635/635\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 4ms/step - loss: 6624855040.0000 - val_loss: 6620126720.0000\n",
      "Epoch 7/25\n",
      "\u001b[1m635/635\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - loss: 6579419136.0000 - val_loss: 6542320640.0000\n",
      "Epoch 8/25\n",
      "\u001b[1m635/635\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - loss: 6412582400.0000 - val_loss: 6481811968.0000\n",
      "Epoch 9/25\n",
      "\u001b[1m635/635\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - loss: 6482722304.0000 - val_loss: 6433234944.0000\n",
      "Epoch 10/25\n",
      "\u001b[1m635/635\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 4ms/step - loss: 6298096640.0000 - val_loss: 6399254528.0000\n",
      "Epoch 11/25\n",
      "\u001b[1m635/635\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - loss: 6389890560.0000 - val_loss: 6359725056.0000\n",
      "Epoch 12/25\n",
      "\u001b[1m635/635\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - loss: 6327300096.0000 - val_loss: 6327544320.0000\n",
      "Epoch 13/25\n",
      "\u001b[1m635/635\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - loss: 6281121280.0000 - val_loss: 6299514880.0000\n",
      "Epoch 14/25\n",
      "\u001b[1m635/635\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - loss: 6215945728.0000 - val_loss: 6270232064.0000\n",
      "Epoch 15/25\n",
      "\u001b[1m635/635\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - loss: 6260659712.0000 - val_loss: 6251655680.0000\n",
      "Epoch 16/25\n",
      "\u001b[1m635/635\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - loss: 6162020352.0000 - val_loss: 6219169280.0000\n",
      "Epoch 17/25\n",
      "\u001b[1m635/635\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - loss: 6192926720.0000 - val_loss: 6195281408.0000\n",
      "Epoch 18/25\n",
      "\u001b[1m635/635\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 4ms/step - loss: 6116588544.0000 - val_loss: 6172280320.0000\n",
      "Epoch 19/25\n",
      "\u001b[1m635/635\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 4ms/step - loss: 6096201728.0000 - val_loss: 6154741248.0000\n",
      "Epoch 20/25\n",
      "\u001b[1m635/635\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - loss: 6125622784.0000 - val_loss: 6132420096.0000\n",
      "Epoch 21/25\n",
      "\u001b[1m635/635\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 4ms/step - loss: 6018288128.0000 - val_loss: 6104794624.0000\n",
      "Epoch 22/25\n",
      "\u001b[1m635/635\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - loss: 6006177792.0000 - val_loss: 6082331648.0000\n",
      "Epoch 23/25\n",
      "\u001b[1m635/635\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 4ms/step - loss: 5986854400.0000 - val_loss: 6054062080.0000\n",
      "Epoch 24/25\n",
      "\u001b[1m635/635\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - loss: 5934094848.0000 - val_loss: 6024109056.0000\n",
      "Epoch 25/25\n",
      "\u001b[1m635/635\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - loss: 5887856128.0000 - val_loss: 6000885248.0000\n"
     ]
    }
   ],
   "source": [
    "history = Simple_nn_2.fit(X_train,y_train,validation_data=(X_validation,y_validation),epochs = 25,batch_size = 200) #creating a history object to be able to produce graphs later"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I will now save the model so I don't have to re-run the process each time, as it takes a long time."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n"
     ]
    }
   ],
   "source": [
    "Simple_nn_2.save('Simple_nn_2.h5')\n",
    "\n",
    "#saving my model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After running the first neural network model, let me visualize the training loss and the validation loss respectively"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "# Plotting accuracy\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'])\n",
    "plt.plot(history.history['val_loss'])\n",
    "plt.title('Loss over Epochs')\n",
    "plt.ylabel('Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.legend(['Train', 'Validation'], loc='upper left')\n",
    "\n",
    "# Displaying the plot\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As can be seen from the graph above, the loss decreases over epochs on the validation set and on the training set as well. The sharpest decrease however comes right after the first couple of epochs, with a more gradual decrease happening from epoch 5 and on. Hence, I will move on to hyperparameter tuning for the neural network model. Since the loss keeps decreasing after each epochs, it means I am not yet overfitting after 25 epochs. I will now use the same neural network model to predict on validation data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m496/496\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1ms/step\n",
      "The initial mean squared error for the neural network model is:  6000885238.862714\n",
      "The initial r-squared for the neural network model is:  0.46081609511424726\n"
     ]
    }
   ],
   "source": [
    "#Input from the X_validation set and predicting y\n",
    "y_prediction = Simple_nn_2.predict(X_validation)\n",
    "\n",
    "initial_mse = mean_squared_error(y_validation,y_prediction)\n",
    "\n",
    "print(\"The initial mean squared error for the neural network model is: \",initial_mse)\n",
    "\n",
    "initial_r2 = r2_score(y_validation,y_prediction)\n",
    "\n",
    "print(\"The initial r-squared for the neural network model is: \",initial_r2)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The initial model describes 46% of the variance in the Purchase Price variable. I will now move on to hyperparameter tuning for this model."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Hyperparameter Tuning - Neural Network"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I will now tune the number of epochs, number of neurons and the batch size for the neural network through performing a grid search."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As the KerasRegressor module is not available, I will be using the MLPRegressor, which is a Multi-Layer Perceptron model. This kind of model is a type of Artificial Neural Networks, which contains 3 layers at least. Hence the model is a bit more complicated than a traditional neural network, which should not matter with the amount of data available to me in the dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.base import BaseEstimator, RegressorMixin\n",
    "\n",
    "#importing the necessary libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.neural_network import MLPRegressor\n",
    "\n",
    "#importing the necessary libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "regressor = MLPRegressor()\n",
    "\n",
    "#creating an instange of MLPRegressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "\n",
    "#importing the gridsearch object"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "param_grid = {\n",
    "    'hidden_layer_sizes': [(100,), (150,), (200,)], #number of hidden layers I want my multi-layer perceptron to contain\n",
    "    'activation': ['relu', 'tanh'], #trying out two different activation functions\n",
    "    'solver': ['adam', 'sgd'],\n",
    "    'alpha': [0.0001, 0.001], #trying out two different alpha values\n",
    "    'learning_rate': ['constant', 'adaptive'],\n",
    "    'max_iter': [100,200,300] #maximum number of epochs\n",
    "}\n",
    "\n",
    "#creating my parameter grid for gridsearch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "from joblib import dump,load\n",
    "\n",
    "#importing the necessary libraries to be able to save the results and load the results of my gridsearch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pickle\n",
    "\n",
    "#importing the necessary libraries to be able to save the results and load the results of my gridsearch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 3 folds for each of 144 candidates, totalling 432 fits\n"
     ]
    }
   ],
   "source": [
    "grid = GridSearchCV(estimator=MLPRegressor(), param_grid=param_grid, cv=3, n_jobs=-1, verbose=2)\n",
    "grid_result = grid.fit(X_train, y_train)\n",
    "\n",
    "#performing grid search for the MLPRegressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['grid_Search_resv ults.joblib']"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dump(grid_result,'grid_Search_resv ults.joblib')\n",
    "\n",
    "#saving my grid results, so I do not have to rerun this each time "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "grid_result = load('grid_Search_resv ults.joblib')\n",
    "\n",
    "#loading my grid result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best: 0.467129603186809 using {'activation': 'relu', 'alpha': 0.001, 'hidden_layer_sizes': (200,), 'learning_rate': 'constant', 'max_iter': 300, 'solver': 'adam'}\n"
     ]
    }
   ],
   "source": [
    "print(f\"Best: {grid_result.best_score_} using {grid_result.best_params_}\")\n",
    "\n",
    "#printing the best score with the best hyperparameters"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After performing grid search for the neural network - Multi-Level Perceptron model, we can see the best parameters for the model. I will now fit the training data onto the MLP model with the discovered best hyperparameters."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "best_params = grid_result.best_params_\n",
    "\n",
    "#creating the best_params object containing the best parameters resulting from the grid search"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\Users\\buoci\\anaconda3\\Lib\\site-packages\\sklearn\\neural_network\\_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (300) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>MLPRegressor(alpha=0.001, hidden_layer_sizes=(200,), max_iter=300)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">MLPRegressor</label><div class=\"sk-toggleable__content\"><pre>MLPRegressor(alpha=0.001, hidden_layer_sizes=(200,), max_iter=300)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "MLPRegressor(alpha=0.001, hidden_layer_sizes=(200,), max_iter=300)"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "best_nn_model = MLPRegressor(**best_params)\n",
    "best_nn_model.fit(X_train,y_train)\n",
    "\n",
    "#using the best parameters to fit the training data and train the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "best_nn_y_pred = best_nn_model.predict(X_test)\n",
    "#making predictions on the test set\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "best_nn_mse = mean_squared_error(y_test,best_nn_y_pred)\n",
    "best_nn_r2 = r2_score(y_test,best_nn_y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error (MSE) of the final neural network model is 5835883273.129859\n",
      "R-squared score of the final neural network model is 0.4779206855322762\n"
     ]
    }
   ],
   "source": [
    "print(\"Mean Squared Error (MSE) of the final neural network model is {}\".format(best_nn_mse))\n",
    "print(\"R-squared score of the final neural network model is {}\".format(best_nn_r2))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Neural Network Actual vs. Predicted Values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(y_test, best_nn_y_pred)\n",
    "plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--')  # Adding diagonal line\n",
    "plt.xlabel('Actual Values')\n",
    "plt.ylabel('Predicted Values')\n",
    "plt.title('Actual vs Predicted Values for the Neural Network Model')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After performing the hyperparameter tuning and grid search, the best r-squared is equal to 0.477 which means this model explains roughly 48% of the variance in the data. The model is a bit better than the one before hyperparameter tuning, however it is still not ideal. Next I will move on to performing a random forest."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Random Forest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestRegressor\n",
    "\n",
    "#importing the random forest regressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "from scipy.stats import randint as sp_randint"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestRegressor()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestRegressor</label><div class=\"sk-toggleable__content\"><pre>RandomForestRegressor()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "RandomForestRegressor()"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#initial random forest model\n",
    "initial_rf_regressor = RandomForestRegressor()\n",
    "\n",
    "#fitting the model on training data\n",
    "initial_rf_regressor.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred_rf = initial_rf_regressor.predict(X_validation)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The mean squared error for the first random forest model is equal to:  5793515852.632263\n",
      "The r-squared of the first random forest model is equal to:  0.4794483853465942\n"
     ]
    }
   ],
   "source": [
    "initial_rf_mse = mean_squared_error(y_validation,y_pred_rf)\n",
    "\n",
    "print(\"The mean squared error for the first random forest model is equal to: \",initial_rf_mse)\n",
    "\n",
    "initial_rf_r2 = r2_score(y_validation,y_pred_rf)\n",
    "\n",
    "print(\"The r-squared of the first random forest model is equal to: \",initial_rf_r2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Based on the code above, the initial r-squared for the un-hypertuned random forest model is 0.48. This means that the untrained random forest model already performs better on validation data than the trained initial neural network model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "#creating the random forest object for hyperparameter tuning\n",
    "\n",
    "rf_regressor = RandomForestRegressor()\n",
    "#creating the parameters for which I want to do grid search\n",
    "param_dist_grid = {\n",
    "        'n_estimators': [50,100,150], #the number of trees in the random forest\n",
    "        'max_depth' : [10,15,20], #maximum depth of one tree in the random forest, helps control overfitting\n",
    "        'min_samples_split' : [2,5,10], #minimum number of samples required to split an internal node\n",
    "        'min_samples_leaf' : [1,2,4] #minimum number of samples required to be at a leaf node\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import GridSearchCV"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Performing grid search and choosing 5-fold cross-validation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=5, estimator=RandomForestRegressor(), n_jobs=-1,\n",
       "             param_grid={&#x27;max_depth&#x27;: [10, 15, 20],\n",
       "                         &#x27;min_samples_leaf&#x27;: [1, 2, 4],\n",
       "                         &#x27;min_samples_split&#x27;: [2, 5, 10],\n",
       "                         &#x27;n_estimators&#x27;: [50, 100, 150]},\n",
       "             scoring=&#x27;neg_mean_squared_error&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(cv=5, estimator=RandomForestRegressor(), n_jobs=-1,\n",
       "             param_grid={&#x27;max_depth&#x27;: [10, 15, 20],\n",
       "                         &#x27;min_samples_leaf&#x27;: [1, 2, 4],\n",
       "                         &#x27;min_samples_split&#x27;: [2, 5, 10],\n",
       "                         &#x27;n_estimators&#x27;: [50, 100, 150]},\n",
       "             scoring=&#x27;neg_mean_squared_error&#x27;)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: RandomForestRegressor</label><div class=\"sk-toggleable__content\"><pre>RandomForestRegressor()</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestRegressor</label><div class=\"sk-toggleable__content\"><pre>RandomForestRegressor()</pre></div></div></div></div></div></div></div></div></div></div>"
      ],
      "text/plain": [
       "GridSearchCV(cv=5, estimator=RandomForestRegressor(), n_jobs=-1,\n",
       "             param_grid={'max_depth': [10, 15, 20],\n",
       "                         'min_samples_leaf': [1, 2, 4],\n",
       "                         'min_samples_split': [2, 5, 10],\n",
       "                         'n_estimators': [50, 100, 150]},\n",
       "             scoring='neg_mean_squared_error')"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#performing grid search with cross-validation\n",
    "grid_search_rf = GridSearchCV(estimator=rf_regressor,param_grid=param_dist_grid,cv=5,n_jobs=-1,scoring ='neg_mean_squared_error')#5-fold cross validation with all processors running\n",
    "#fitting the grid search to the training data\n",
    "grid_search_rf.fit(X_train,y_train)  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['grid_Search_rf.joblib']"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dump(grid_search_rf,'grid_Search_rf.joblib')\n",
    "\n",
    "#saving the results of my grid_search"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "grid_search_rf = load('grid_Search_rf.joblib')\n",
    "\n",
    "#loading the results of my gridsearch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best: -5268319054.988328 using {'max_depth': 15, 'min_samples_leaf': 2, 'min_samples_split': 10, 'n_estimators': 150}\n"
     ]
    }
   ],
   "source": [
    "print(f\"Best: {grid_search_rf.best_score_} using {grid_search_rf.best_params_}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "best_params_rf = grid_search_rf.best_params_\n",
    "\n",
    "#saving the best random forest parameters to be able to apply them to the RF Regressor"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After saving the best parameters, I will now use these to fit the best model on the training data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestRegressor(max_depth=15, min_samples_leaf=2, min_samples_split=10,\n",
       "                      n_estimators=150)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestRegressor</label><div class=\"sk-toggleable__content\"><pre>RandomForestRegressor(max_depth=15, min_samples_leaf=2, min_samples_split=10,\n",
       "                      n_estimators=150)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "RandomForestRegressor(max_depth=15, min_samples_leaf=2, min_samples_split=10,\n",
       "                      n_estimators=150)"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "best_rf_model = RandomForestRegressor(**best_params_rf) #applying the best hyperparameters\n",
    "best_rf_model.fit(X_train,y_train) #fitting the mdodel on test data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, with the best random forest model, I will predict y based on X test data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "best_rf_y_pred = best_rf_model.predict(X_test) #predicting y based on X test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "best_rf_mse = mean_squared_error(y_test,best_rf_y_pred)\n",
    "best_rf_r2 = r2_score(y_test,best_rf_y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error (MSE) of the final random forest model is 5338706199.907799\n",
      "R-squared score of the final random forest model is 0.5223982484664016\n"
     ]
    }
   ],
   "source": [
    "print(\"Mean Squared Error (MSE) of the final random forest model is {}\".format(best_rf_mse))\n",
    "print(\"R-squared score of the final random forest model is {}\".format(best_rf_r2))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Based on the above information, we conclude that the hypertuned model performs better than the initial simple random forest model by explaining about 5% more variance of the data."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Random Forest predicted vs. actual values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plotting the actual vs predicted values\n",
    "plt.scatter(y_test, best_rf_y_pred)\n",
    "plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--')  # Add diagonal line\n",
    "plt.xlabel('Actual Values')\n",
    "plt.ylabel('Predicted Values')\n",
    "plt.title('Actual vs Predicted Values for Random Forest Model')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After examining the above graph, it is clear that the model has some ability to predict the target variable, however there are also a lot of data points which are not predicted correctly. This is also what is apparent from the r-squared value which is at 0.52."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Bonus: Linear Regression"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As a bonus of this assignment, I will fit a linear regression to the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LinearRegression\n",
    "\n",
    "#importing Linear Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "#defining the linear regression model\n",
    "LinRegmodel = LinearRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#training the linear regression model\n",
    "LinRegmodel.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred_lr = LinRegmodel.predict(X_validation)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6307284867.139049\n",
      "0.4332858655808315\n"
     ]
    }
   ],
   "source": [
    "#mse for the initial model\n",
    "\n",
    "initial_mse_lr = mean_squared_error(y_validation,y_pred_lr)\n",
    "initial_r2_lr = r2_score(y_validation,y_pred_lr)\n",
    "\n",
    "print(initial_mse_lr)\n",
    "print(initial_r2_lr)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On the validation set, the linear regression model has an r-squared value of 0.433 meaning this model explains only 43% of the variance. I will now predict on the test set, without hyperparameter tuning as doing this for a simple model like linear regression does not make too much sense."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_test_pred_lr = LinRegmodel.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The final mean squared error for the linear regression model is:  2.3181323640298252e+27\n",
      "The final r-squared for the linear regression model is:  -2.0738059670084234e+17\n"
     ]
    }
   ],
   "source": [
    "final_mse_lr = mean_squared_error(y_test,y_test_pred_lr)\n",
    "final_r2_lr = r2_score(y_test,y_test_pred_lr)\n",
    "\n",
    "print(\"The final mean squared error for the linear regression model is: \",final_mse_lr)\n",
    "print(\"The final r-squared for the linear regression model is: \",final_r2_lr)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since this model's r-squared is negative, it means it is performing worse than a horizontal line (0) being fitted to the data. Hence, I can conclude that the linear regression model performs poorly."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Linear Regression: Actual vs. Predicted Values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plotting the actual vs predicted values for linear regression\n",
    "plt.scatter(y_test, y_test_pred_lr)\n",
    "plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--')  # Add diagonal line\n",
    "plt.xlabel('Actual Values')\n",
    "plt.ylabel('Predicted Values')\n",
    "plt.title('Actual vs Predicted Values for Linear Regression Model')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Based on the above graph, it is clear that the linear regression model is very poor in predicting the actual data."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Conclusion"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "By examining the regression metrics and the actual vs. predicted graphs, I am able to make some conclusions regarding the two main models. The random forest model has been able to reach an r-squared value of 0.5226 and a mean-squared error of 5336176394.00 . On the other hand, the neural network model produced an R-squared score of 0.4539 and a mean-squared error of 6103341989.00. Based on these scores I can conclude that the best model out of the two is the random forest model.\n",
    "\n",
    "MSE: The mean squared error is quite large, which indicates that the predictions often deviate by a large amount from the actual values. This means there is room for improvement for the model.\n",
    "\n",
    "R2: R2 of 0.5226 signifies that around 52% of the variance in the target variable can be explained with the independent variables with this model. This is a moderately good value, but considering the size of the dataset is pretty good."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Explainability"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I will now investigate which features have the biggest contribution to the predictions of the best model: The random forest model. To be able to do this efficiently, I will take a sample from the test dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_test_explainability = pd.DataFrame(X_test)\n",
    "\n",
    "#creating a dataframe for explainability"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [],
   "source": [
    "sample = X_test_explainability.sample(5000) #setting the sample to 5000 to ensure faster computation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For explainability, I will be using the SHAP package. The SHAP values computed will tell me more about the model's predictions. The reason both, the tree explainer and SHAP values are needed is that the process of computing SHAP values is very complex. The explainer provides a simpler interface to compute the SHAP values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using `tqdm.autonotebook.tqdm` in notebook mode. Use `tqdm.tqdm` instead to force console mode (e.g. in jupyter console)\n"
     ]
    }
   ],
   "source": [
    "import shap"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [],
   "source": [
    "explainer = shap.TreeExplainer(best_rf_model)\n",
    "shap_values = explainer.shap_values(sample)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### SHAP Summary Explanation plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "No data for colormapping provided via 'c'. Parameters 'vmin', 'vmax' will be ignored\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x950 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "shap.summary_plot(shap_values,sample,X_encoded.columns)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Based on the above graph, it is clear that the variables inside surface size and construction year have the biggest impact on the model's output. On the other hand, all of the soortWoning one-hot encoded values have a very small impact on the output of the random forest model."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Answering of Research Question: How can a housing company best set up the prices of new properties based on a range of different attributes ?\n",
    "\n",
    "A housing company can make the best use of the Random Forest model when aiming to set up the prices of new properties they will be listing. This model can take into consideration different kinds of variables, and is able to make the best predictions compared to the other tested models."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Sub-Question: What are the most important features when trying to set up prices of new properties ? "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A housing company should look at inside surface size, construction year, and object category first when trying to set up prices for new properties."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Sub-Question: How does the object category type predict the price of properties ? "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The house type is an important predictor as can be seen in the above SHAP graph."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Sub-Question: How can energy label predict the price of properties ? "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As can be seen in the above graph, energy label is not that important of a predictor in regards to the purchase price of a property."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Sub-Question: Is inside surface size one of the most important predictors as one would assume ? "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Yes, inside surface size is not only one of the most important predictors, it is the most important predictor when trying to predict house prices."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "base",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
